@using Student_Supervisor_Data_Access.DataManager;
@using Student_Supervisor_Logic.Factory;
@using Student_Supervisor_Logic.Models;
@inject IDataManager dataManager
@inject NavigationManager navManager

@page "/StudentBookAppointment/{StudentNumber}"

<div class="student-app-btn-container">
    <div>
        <button @onclick="() => SelectView(ref isAvailable)" class="col-6 g-item1 btn btn-app btn-outline-light btn-lg text-uppercase">Available Appointments</button>
    </div>
    <div>
        <button @onclick="() => SelectView(ref isScheduled)" class="col-6 g-item2 btn btn-app btn-outline-light btn-lg text-uppercase">Scheduled Appointments</button>
    </div>
</div>

<div class="app-display-container">
    @if (isAvailable)
    {
        <h6 class="app-heading">Available Appointments</h6>
        @if (student!.PersonalSupervisor!.AvailableAppointments.Count > 0 && !hasScheduled)
        {
            foreach(var app in student.PersonalSupervisor.AvailableAppointments)
            {
                <div class="studentBox">
                    <div class="studentBoxInfo">
                        <h6>Appointment Id: @app.AppointmentId</h6>
                        <h6>Date: @app.Date</h6>
                        <h6>Time:@app.Time</h6>
                        <h6>Duration: @app.Duration</h6>
                    </div>
                    <div>
                        <button @onclick="() => ConfirmAppointment(app)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Book Now</button>
                    </div>
                </div>
            }

        }
        else
        {
            <div class="noAppointmentBox">
                <div>
                    <span>There Are No Appointments Available For You. Please Check Your Scheduled Appointmnets</span>
                </div>
            </div>

        }
    }
    @if (isScheduled)
    {
        <h6 class="app-heading">Scehduled Appointments</h6>
        @if (student!.ScheduledAppointments.Count > 0)
        {
            for (int i = student.ScheduledAppointments.Count - 1; i >= 0; i--)
            {
                <div class="studentBox">
                    <div class="studentBoxInfo">
                        <h6>Appointment Id: @student.ScheduledAppointments[i].AppointmentId</h6>
                        <h6>Date: @student.ScheduledAppointments[i].Date</h6>
                        <h6>Time: @student.ScheduledAppointments[i].Time</h6>
                        <h6>Duration: @student.ScheduledAppointments[i].Duration</h6>
                    </div>
                </div>
            }
        }
        else
        {
            <div>You Have No Scheduled Appointments</div>

        }
    }
    @if (isAppointment)
    {
        <h6>Add New Appointment</h6>
    }

</div>





@code {

    [Parameter]
    public string? StudentNumber { get; set; }

    private List<SeniorTutorModel>? seniorTutors;
    private StudentModel? student;


    [Parameter]
    public string? StaffNumber { get; set; }

    private bool isAvailable;
    private bool isScheduled;
    private bool isAppointment;
    private bool hasScheduled;


    protected override void OnInitialized()
    {
        seniorTutors = dataManager.DeserializeSeniorTutorModelFromFile("C:\\Users\\ssmal\\source\\repos\\Student Supervison App\\Student Supervison App Library\\XmlFiles\\Database.xml");
        student = dataManager.GetStudentAndAssignPersonalSupervisor(StudentNumber!, seniorTutors);
        ResetView();
        SelectView(ref isAvailable);
        if(student.ScheduledAppointments.Count > 0)
        {
            hasScheduled = true;
        }
        else
        {
            hasScheduled = false;
        }


    }

    private void ResetView()
    {
        isAvailable = false;
        isScheduled = false;
        isAppointment = false;

    }

    private void SelectView(ref bool currentView)
    {
        ResetView();
        currentView = true;

    }

    private void ConfirmAppointment(AppointmentModel appointment)
    {
        dataManager.ScheduleAppointmentForSupervisor(student!.PersonalSupervisor.StaffNumber, appointment.AppointmentId, student.StudentNumber, "C:\\Users\\ssmal\\source\\repos\\Student Supervison App\\Student Supervison App Library\\XmlFiles\\Database.xml");
        student.ScheduledAppointments.Add(appointment);
        student.PersonalSupervisor.AvailableAppointments.RemoveAll(a => a.AppointmentId == appointment.AppointmentId);
        student.PersonalSupervisor.UpdateInteractionScore(10);
        dataManager.UpdateInteractionScore(student.PersonalSupervisor.StaffNumber, student.PersonalSupervisor.InteractionScore, "C:\\Users\\ssmal\\source\\repos\\Student Supervison App\\Student Supervison App Library\\XmlFiles\\Database.xml");
        hasScheduled = true;
    }


    private void ClosePage(string StudentNumber)
    {

        navManager.NavigateTo($"/StudentHomePage/{StudentNumber}");
    }
}
