@using Student_Supervisor_Data_Access.DataManager;
@using Student_Supervisor_Logic.Factory;
@using Student_Supervisor_Logic.Models;
@inject IDataManager dataManager
@inject NavigationManager navManager

@page "/Appointments/{StaffNumber}"

<h3>Appointments</h3>

<div class="app-btn-container">
    <div>
        <button @onclick="() => SelectView(ref isAvailable)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Available Appointments</button>
    </div>
    <div>
        <button @onclick="() => SelectView(ref isScheduled)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Scheduled Appointments</button>
    </div>
    <div>
        <button @onclick="() => SelectView(ref isCompleted)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Completed Appointments</button>
    </div>
    <div>
        <button @onclick="() => SelectView(ref isIncomplete)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Incomplete Appointments</button>
    </div>
</div>

<div class="app-display-container">
    @if (isAvailable)
    {
        <h6 class="app-heading">Available Appointments</h6>
        @if (personalSupervisor!.AvailableAppointments.Count > 0)
        {
            @foreach (var app in personalSupervisor!.AvailableAppointments)
            {
                <div class="studentBox">
                    <div>
                        <h6>Id: @app.AppointmentId</h6>
                        <h6>Date: @app.Date</h6>
                        <h6>Time: @app.Time</h6>
                        <h6>Duration: @app.Duration</h6>
                    </div>
                    <div>
                        <button class="btn btn-app btn-outline-light btn-lg text-uppercase">Delete</button>
                    </div>
                </div>

            }
            <div class ="form-group-button">
                <button @onclick="() => AddAvailableAppointment(ref isAppointment)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Add Available Appointment</button>
            </div>
        }
        else
        {
            <div class="noAppointmentBox">
                <div>
                    <span>You Have No Available Appointments</span>
                </div>

                <div>
                    <button @onclick="() => AddAvailableAppointment(ref isAppointment)" class="btn btn-app btn-outline-light btn-lg text-uppercase">Add Available Appointment</button>
                </div>
            </div>

        }
    }

    @if (isScheduled)
    {
        <h6 class="app-heading">Scehduled Appointments</h6>
        @if (personalSupervisor!.ScheduledAppointments.Count > 0)
        {
            @foreach (var app in personalSupervisor!.ScheduledAppointments)
            {
                <div class="studentBox">
                    <div>
                        <h6>Id: @app.AppointmentId</h6>
                        <h6>Date: @app.Date</h6>
                        <h6>Time: @app.Time</h6>
                        <h6>Duration: @app.Duration</h6>
                    </div>
                    <div class="completion-btns">
                        <button class="btn btn-app btn-outline-light btn-lg text-uppercase">Complete</button>
                        <button class="btn btn-app btn-danger btn-outline-light btn-lg text-uppercase">Incomplete</button>
                    </div>
                </div>

            }
        }
        else
        {
            <div>You Have No Scheduled Appointments</div>

        }
    }

    @if (isCompleted)
    {
        <h6>Completed Appointments</h6>
        @if (personalSupervisor!.CompletedAppointments.Count > 0)
        {
            @foreach (var app in personalSupervisor!.CompletedAppointments)
            {
                <div>
                    @app.AppointmentId
                    @app.Date
                    @app.Time
                    @app.Duration
                </div>
            }
        }
        else
        {
            <div>You Have No Completed Appointments</div>

        }
    }

    @if (isIncomplete)
    {
        <h6>Incomplete Appointments</h6>
        @if (personalSupervisor!.IncompleteAppointments.Count > 0)
        {
            @foreach (var app in personalSupervisor!.IncompleteAppointments)
            {
                <div>
                    @app.AppointmentId
                    @app.Date
                    @app.Time
                    @app.Duration
                </div>
            }
        }
        else
        {
            <div>You Have No Incomplete Appointments</div>

        }
    }

    @if (isAppointment)
    {
        <h6>Add New Appointment</h6>

        <form>
            <div class="form-group">
                <label>Date:</label>
                <input type="date" class="form-control" @bind="appointmentDate">
            </div>
            <div class="form-group">
                <label>Time:</label>
                <input type="time" class="form-control" @bind="appointmentTime">
            </div>
            <div class="form-group">
                <label>Duration In Minutes:</label>
                <input type="number" class="form-control" @bind="durationInMinutes">
            </div>
            <div class="form-group-button">
                <button @onclick="() => ConfirmNewAppointment(appointmentDate.ToString(),appointmentTime.ToString(),durationInMinutes.ToString()) " class="btn btn-app btn-outline-light btn-lg text-uppercase">
                    Confirm
                </button>
            </div>

        </form>
    }

</div>









@code {
    [Parameter]
    public string? StaffNumber { get; set; }

    private bool isAvailable;
    private bool isScheduled;
    private bool isCompleted;
    private bool isIncomplete;
    private bool isAppointment;
    private List<SeniorTutorModel>? database;
    private PersonalSupervisorModel? personalSupervisor;

    private DateOnly appointmentDate;
    private TimeOnly appointmentTime;
    private int durationInMinutes;

    protected override void OnInitialized()
    {
        database = dataManager.DeserializeSeniorTutorModelFromFile("C:\\Users\\ssmal\\source\\repos\\Student Supervison App\\Student Supervison App Library\\XmlFiles\\Database.xml");
        personalSupervisor = dataManager.GetPersonalSupervisor(StaffNumber!, database);
        ResetView();
        SelectView(ref isAvailable);

    }

    public void ResetView()
    {
        isAvailable = false;
        isScheduled = false;
        isCompleted = false;
        isIncomplete = false;
        isAppointment = false;

    }

    public void SelectView(ref bool currentView)
    {
        ResetView();
        currentView = true;

    }

    public void AddAvailableAppointment(ref bool currentView)
    {
        ResetView();
        currentView = true;
    }

    public void ConfirmNewAppointment(string date, string time, string duration)
    {
        try
        {
            AppointmentModel newAppointment = ModelFactory.CreateAppointment(date, time, duration);
            personalSupervisor!.AvailableAppointments.Add(newAppointment);
            dataManager.AppendAppointmentToAvailableAppointmentsXml(StaffNumber!, newAppointment, "C:\\Users\\ssmal\\source\\repos\\Student Supervison App\\Student Supervison App Library\\XmlFiles\\Database.xml");
            SelectView(ref isAvailable);

        }
        catch
        {
            SelectView(ref isAvailable);
        }

    }

}
